// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  password          String
  name              String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  workoutPlans      WorkoutPlan[]
  scheduledWorkouts ScheduledWorkout[]
  completedWorkouts CompletedWorkout[]

  @@map("users")
}

model Exercise {
  id               String            @id @default(uuid())
  name             String            @unique
  description      String
  category         String
  muscleGroup      String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  workoutExercises WorkoutExercise[]

  @@map("exercises")
}

model WorkoutPlan {
  id                String             @id @default(uuid())
  name              String
  description       String?
  userId            String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutExercises  WorkoutExercise[]
  scheduledWorkouts ScheduledWorkout[]

  @@map("workout_plans")
}

model WorkoutExercise {
  id           String      @id @default(uuid())
  workoutPlanId String
  exerciseId   String
  sets         Int
  reps         Int
  weight       Float?
  duration     Int?        // in seconds, for cardio exercises
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  workoutPlan  WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)
  exercise     Exercise    @relation(fields: [exerciseId], references: [id])

  @@map("workout_exercises")
}

model ScheduledWorkout {
  id           String       @id @default(uuid())
  workoutPlanId String
  userId       String
  scheduledFor DateTime
  completed    Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  workoutPlan  WorkoutPlan  @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  completedWorkout CompletedWorkout?

  @@map("scheduled_workouts")
}

model CompletedWorkout {
  id                String          @id @default(uuid())
  scheduledWorkoutId String          @unique
  userId            String
  completedAt       DateTime        @default(now())
  notes             String?
  rating            Int?            // User rating of the workout (1-5)
  duration          Int?            // in minutes
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  scheduledWorkout  ScheduledWorkout @relation(fields: [scheduledWorkoutId], references: [id], onDelete: Cascade)
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  exerciseResults   ExerciseResult[]

  @@map("completed_workouts")
}

model ExerciseResult {
  id                String          @id @default(uuid())
  completedWorkoutId String
  exerciseId        String
  sets              Int
  reps              Int
  weight            Float?
  duration          Int?            // in seconds
  notes             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  completedWorkout  CompletedWorkout @relation(fields: [completedWorkoutId], references: [id], onDelete: Cascade)

  @@map("exercise_results")
}